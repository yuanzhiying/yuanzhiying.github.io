{"meta":{"title":"yuanzhiying的博客","subtitle":"工作学习记录","description":"坚持下去","author":"yuanzhiying","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2020-12-08T07:12:16.000Z","updated":"2020-12-08T08:00:30.887Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-12-08T07:06:43.000Z","updated":"2020-12-08T07:59:50.791Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"我呀有个小萌宝"},{"title":"标签","date":"2020-12-08T07:06:56.000Z","updated":"2020-12-08T08:00:15.640Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"npm、nvm使用国内淘宝源","slug":"npm、nvm使用国内淘宝源","date":"2020-12-09T02:21:45.000Z","updated":"2020-12-09T02:23:06.379Z","comments":true,"path":"2020/12/09/npm、nvm使用国内淘宝源/","link":"","permalink":"http://example.com/2020/12/09/npm%E3%80%81nvm%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E6%B7%98%E5%AE%9D%E6%BA%90/","excerpt":"","text":"npm： 显示当前的镜像地址：npm get registry 更换为淘宝的镜像地址：npm config set registry http://registry.npm.taobao.org 再次查看当前的镜像地址：npm get registry nvm： .bash_profile文件中添加：12export NVM_NODEJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;nodeexport NVM_IOJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;iojs 执行source ~/.bash_profile起效","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Flutter、Dart学习总结","slug":"Flutter、Dart学习总结","date":"2020-12-08T07:37:16.000Z","updated":"2020-12-08T08:13:31.032Z","comments":true,"path":"2020/12/08/Flutter、Dart学习总结/","link":"","permalink":"http://example.com/2020/12/08/Flutter%E3%80%81Dart%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"","text":"Container添加 padding, margins, borders, background color, 或将其他装饰添加到widget Scaffold使用Scaffold是最容易的，它是 Material Components库中的一个widget，它提供了一个默认banner，背景颜色，并且具有添加drawer，snack bar和底部sheet的API DefaultTextStyleDefaultTextStyle.merge可以允许您创建一个默认的文本样式，该样式会被其所有的子节点继承 maxCrossAxisExtentGridView.extent中maxCrossAxisExtent的作用 SizedBox能强制子控件具有特定宽度、高度或两者都有,使子控件设置的宽高失效123456789new SizedBox( width: 100.0, height: 100.0, child: Container( width: 200.0, height: 200.0, color: Color(0xffff0000), ),) State状态管理 如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父widget管理 如果所讨论的状态是有关界面外观效果的，例如动画，那么状态最好由widget本身来管理 如果有疑问，首选是在父widget中管理状态 flutter的KeyFlutter–&gt;何时需要使用到key？flutter 中的 key flutter的json转为实体类插件（Android Studio插件）AS中搜索插件FlutterJsonBeanFactory ，安装，重启AS。在指定目录下，右键，new - dart bean class File From JSON，粘贴进json，格式化，生成即可。 dart中export使用在A库中使用export关键字引入B库，当我们使用A库的时候，会自动引入B库，也就是说我们导入了A库，就可以使用B库了。 cupertino下push的同时，隐藏tabbar1234Navigator.of(context, rootNavigator: true) .push(CupertinoPageRoute(builder: (BuildContext context) &#123; return new MsgCenterPage(); &#125;)); flutter使用16进制色值Color(0xFFFF8A65)其中0x后面的两位FF表示透明度16进制，FF后面为色值 flutter获取屏幕宽高和状态栏高度1234567891011121314&#x2F;** 获取屏幕宽度 *&#x2F; static double getScreenWidth(BuildContext context) &#123; return MediaQuery.of(context).size.width; &#125; &#x2F;** 获取屏幕高度 *&#x2F; static double getScreenHeight(BuildContext context) &#123; return MediaQuery.of(context).size.height; &#125; &#x2F;** 获取系统状态栏高度 *&#x2F; static double getSysStatsHeight(BuildContext context) &#123; return MediaQuery.of(context).padding.top; &#125; GestureDetector为布局添加手势，child和空白区域全部可点击GestureDetector的child添加为Container，同时Container要设置color，整体Container的child和空白区域才全部可点击，否则则是Container的child可点而空白不可点击。 隐藏键盘1FocusScope.of(context).requestFocus(FocusNode()); dynamic的使用在数据解析过程中，如果不确定当前类型的话，可以使用dynamic来代替，具体是某个类型的话，再转为某个类型。1234567891011121314151617181920212223@JsonSerializable()class ResultData extends Object &#123; @JsonKey(name: &#39;code&#39;) String code; @JsonKey(name: &#39;data&#39;) dynamic data; @JsonKey(name: &#39;url&#39;) String url; @JsonKey(name: &#39;message&#39;) String message; ResultData(this.code,this.data,this.url,this.message,); factory ResultData.fromJson(Map&lt;String, dynamic&gt; srcJson) &#x3D;&gt; _$ResultDataFromJson(srcJson); Map&lt;String, dynamic&gt; toJson() &#x3D;&gt; _$ResultDataToJson(this);&#125; flutter延迟执行123new Future.delayed(Duration(seconds: 2), () &#123; Navigator.of(context).pop(); &#125;); flutter中url中编码解码例如：需要将js://iOSAction?%7B%22method%22:%22toLogin%22%7D转为js://iOSAction?&#123;&quot;method&quot;:&quot;toLogin&quot;&#125;使用Uri的decode方法：String url = Uri.decodeFull(navigation.url);相反，编码的话，使用Uri的encode方法。 flutter的图片布局填充满父布局1234567891011121314151617方法一：new ConstrainedBox( constraints: new BoxConstraints.expand(), child: new FadeInImage.assetNetwork( placeholder: &quot;assets&#x2F;home&#x2F;placeholder_default.png&quot;, image: model !&#x3D; null ? &quot;$&#123;APIConfig.pictureURL&#125;&quot; &quot;$&#123;model.pictureUrl&#125;&quot; : null, fit: BoxFit.fill, ), ),方法二：如果已知宽高，Image里直接定义指定的宽和高MediaQuery.of(context).size.widthMediaQuery.of(context).size.height Text超出省略号截断TextOverflow.ellipsis1234new Text( &#39;我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门&#39;, overflow: TextOverflow.ellipsis, ), list通过map转化的时候获取indexlist通过asMap转为Map，然后使用Map.map获取index。1234567891011121314151617181920212223homeNoticeList .asMap() .map((index, model) &#x3D;&gt; MapEntry( index, new GestureDetector( onTap: () &#123; logPrint(index, message: &quot;我点击了滚动的广告&quot;); &#125;, child: new Container( color: ColorConfig.white, child: new Align( alignment: Alignment.centerLeft, child: new Text( model.title, style: new TextStyle(fontSize: 14.0), overflow: TextOverflow.ellipsis, ), ), ), ), )) .values .toList(); Cookie管理网络请求使用dio进行网络请求，可以添加cookiemanager拦截器，来对cookie进行自动管理，也可手动删除cookie。Flutter中添加依赖12dio: ^2.1.7 # 网络请求cookie_jar: ^1.0.0 # cookie管理 dio请求封装中，添加拦截器：12&#x2F;&#x2F; 添加&#96;Cookie&#96;管理 dio.interceptors.add(CookieManager(CookieJar())); 然后在request的headers中会自动增加1cookie: SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed 与iOS的moya cookie不一样，一个是cookie，一个是&quot;Set-Cookie&quot;（header中拼入）：1[&quot;Set-Cookie&quot;:SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed] Appbar中使用自定义的返回按钮先设置automaticallyImplyLeading为false，然后在leading中设置返回按钮。1234567automaticallyImplyLeading: false, leading: new GestureDetector( onTap: () &#123; Navigator.of(context).pop(); &#125;, child: new Image.asset(&#39;assets&#x2F;common&#x2F;nav_back_arrow.png&#39;), ), 设置appbar高度1234appBar: new PreferredSize( child: appBar, preferredSize: Size.fromHeight(44), ), 使用webview_flutter时执行调用js的方法：推荐在onPageFinished里调用。例如：123456789101112131415onPageFinished: (String url) &#123; print(&quot;page finished loading: $url&quot;); setState(() &#123; isLoading &#x3D; false; &#125;); &#x2F;&#x2F; 如果为项目风险等级的url，则执行隐藏header的js。 if (widget.url &#x3D;&#x3D; ContentConfig.projectRiskLevel) &#123; _controller.future.then((controller) &#123; controller .evaluateJavascript(&#39;hideHeader();&#39;) .then((result) &#123;&#125;); &#125;); &#125; &#125; android studio中使用print打印，只能打印出一部分的解决办法：导入foundation库：import &#39;package:flutter/foundation.dart&#39;;使用flutter里foundation中的debugPrint打印即可打印全部。 TabBar对应的TabController使用代码切换tabBar (index从0开始)：1controller.animateTo(index); flutter富文本RichText使用RichText在段落中显示不同样式 复制到粘贴板123456import &#39;package:flutter&#x2F;services.dart&#39;; static copyToClipboard(final String text) &#123; if (text &#x3D;&#x3D; null) return; Clipboard.setData(new ClipboardData(text: text)); &#125; 返回当前的时间戳123static int currentTimeMillis() &#123; return new DateTime.now().millisecondsSinceEpoch; &#125; 返回文件大小字符串12345678910111213141516171819202122232425static const RollupSize_Units &#x3D; [&quot;GB&quot;, &quot;MB&quot;, &quot;KB&quot;, &quot;B&quot;]; &#x2F;** 返回文件大小字符串 *&#x2F; static String getRollupSize(int size) &#123; int idx &#x3D; 3; int r1 &#x3D; 0; String result &#x3D; &quot;&quot;; while (idx &gt;&#x3D; 0) &#123; int s1 &#x3D; size % 1024; size &#x3D; size &gt;&gt; 10; if (size &#x3D;&#x3D; 0 || idx &#x3D;&#x3D; 0) &#123; r1 &#x3D; (r1 * 100) ~&#x2F; 1024; if (r1 &gt; 0) &#123; if (r1 &gt;&#x3D; 10) result &#x3D; &quot;$s1.$r1$&#123;RollupSize_Units[idx]&#125;&quot;; else result &#x3D; &quot;$s1.0$r1$&#123;RollupSize_Units[idx]&#125;&quot;; &#125; else result &#x3D; s1.toString() + RollupSize_Units[idx]; break; &#125; r1 &#x3D; s1; idx--; &#125; return result; &#125; flutter调起拨打电话12345678910111213141516import &#39;package:url_launcher&#x2F;url_launcher.dart&#39;;Future&lt;void&gt; _launched;Future&lt;void&gt; _makePhoneCall(String url) async &#123; if (await canLaunch(url)) &#123; await launch(url); &#125; else &#123; throw &#39;Could not launch $url&#39;; &#125; &#125;&#x2F;&#x2F; 调起拨打电话 setState(() &#123; _launched &#x3D; _makePhoneCall(&#39;tel:18612345678&#39;); &#125;); 垂直分割线1234Container( height: 40, child: VerticalDivider(color: Colors.red), ), 可取消的定时任务Timer代替Future.","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://example.com/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://example.com/tags/Flutter/"},{"name":"Dart","slug":"Dart","permalink":"http://example.com/tags/Dart/"}]}],"categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"Flutter","slug":"Flutter","permalink":"http://example.com/categories/Flutter/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"Flutter","slug":"Flutter","permalink":"http://example.com/tags/Flutter/"},{"name":"Dart","slug":"Dart","permalink":"http://example.com/tags/Dart/"}]}