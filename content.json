{"meta":{"title":"yuanzhiying的博客","subtitle":"工作学习记录","description":"坚持下去","author":"yuanzhiying","url":"http://yuanzhiying.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-12-08T07:12:16.000Z","updated":"2020-12-08T08:00:30.887Z","comments":true,"path":"categories/index.html","permalink":"http://yuanzhiying.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-12-08T07:06:43.000Z","updated":"2020-12-08T07:59:50.791Z","comments":true,"path":"about/index.html","permalink":"http://yuanzhiying.github.io/about/index.html","excerpt":"","text":"我呀有个小萌宝"},{"title":"标签","date":"2020-12-08T07:06:56.000Z","updated":"2020-12-08T08:00:15.640Z","comments":true,"path":"tags/index.html","permalink":"http://yuanzhiying.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SwiftUI与原项目混用","slug":"SwiftUI与原项目混用","date":"2021-01-22T05:33:45.000Z","updated":"2021-01-22T05:33:45.093Z","comments":true,"path":"2021/01/22/SwiftUI与原项目混用/","link":"","permalink":"http://yuanzhiying.github.io/2021/01/22/SwiftUI%E4%B8%8E%E5%8E%9F%E9%A1%B9%E7%9B%AE%E6%B7%B7%E7%94%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SwiftUI学习","slug":"SwiftUI学习","date":"2021-01-14T01:51:25.000Z","updated":"2021-01-22T05:21:13.610Z","comments":true,"path":"2021/01/14/SwiftUI学习/","link":"","permalink":"http://yuanzhiying.github.io/2021/01/14/SwiftUI%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"学习文章：八个常见的SwiftUI误用及对应的正确打开方式SwiftUI 基础之 Identifiable 快捷键 control + option + 点击：出现属性编辑器 command + 点击：出现快捷菜单 布局 VStack - 垂直布局 HStack - 水平布局 Spacer - 间距 Text - 文本 Image - 图片 Divider - 分割线 Group - 预览窗口预览多个 ScrollView - 滚动视图 Path - 路径 Shaper - 形状 代码解析123456789101112131415struct ContentView: View &#123; var body: some View &#123; Text(&quot;Hello, world!&quot;) .font(.title) .foregroundColor(.yellow) .bold() .italic() &#125;&#125;struct ContentView_Previews: PreviewProvider &#123; static var previews: some View &#123; ContentView() &#125;&#125; ContentView为布局，ContentView_Previews为预览布局 body为计算属性，类型为不透明类型的View，不透明类型使用some修饰 Swift语法，只有一行代码，return可以省略 some修饰，表示不透明类型，总会返回某一个特定的类型，但是不知道是哪一种 可以返回关联类型的协议类型 安全性：不对外暴露具体的返回类型 用来解决SwiftUI繁琐的不确定返回类型问题 使用技巧 可以在右上角+里拖动空间到代码中 使用import导入所需的库 可以新建SwiftUI View ignoresSafeArea忽略safeArea的边距，用在feame前 布局group组件可增加padding VStack可添加font、foregroundColor等属性，对所有包含的元素起效 串联属性，每一个点语法属性，返回当前对象 12345Text(&quot;Hello world!&quot;) .font(.title) .foregroundColor(.purple) A modifier returns a view that applies a new behavior or visual change. You can chain multiple modifiers to achieve the effects you need. 使用previewLayout可以定义预览的窗口的大小，也可以使用Group同时预览多个窗口，通用属性可以提取到外面 123456789struct LandmarkRow_Previews: PreviewProvider &#123; static var previews: some View &#123; Group &#123; LandmarkRow(landmark: landmarks[0]) LandmarkRow(landmark: landmarks[1]) &#125; .previewLayout(.fixed(width: 300, height: 70)) &#125;&#125; Identifiable：作为唯一标识遍历需要唯一标识来遍历，如下： 123456List(landmarks, id: \\.id) &#123; landmark in NavigationLink( destination: LandmarkDetail()) &#123; LandmarkRow(landmark: landmark) &#125;&#125; 如果让列表中元素遵守Identifiable协议，遍历处即可省略id参数，model中需要有名称为id的属性 123struct Landmark: Hashable, Codable, Identifiable &#123; var id: Int var name: String 页面跳转使用NavigationLink，destination为要跳转的页面 123NavigationLink(destination: LandmarkDetail()) &#123; LandmarkRow(landmark: landmark)&#125; 使用NavigationView为页面田健导航栏，可设置 navigationTitle等 12345678NavigationView &#123; List(landmarks) &#123; landmark in NavigationLink(destination: LandmarkDetail()) &#123; LandmarkRow(landmark: landmark) &#125; &#125; .navigationTitle(&quot;Landmarks&quot;)&#125; 预览窗口按钮作用：第一个按钮：Live Preview 和Debug Preview，未打开只能查看页面，不能点击等，打开之后可以点击跳转页面等交互操作第二个按钮：Preview On Device，连上真机点击之后，预览可以同步在真机上展示第三个按钮：Inspect Preview，可以打开窗口属性窗口，可以设置预览窗口属性第四个按钮：Duplicate Preview ，可以复制创建多个预览窗口 代码控制预览的机型 1234567891011121314151617struct LandmarkList_Previews: PreviewProvider &#123; static var previews: some View &#123; LandmarkList() .previewDevice(PreviewDevice(rawValue: &quot;iPhone SE (2nd generation)&quot;)) &#125;&#125;&#x2F;&#x2F; 多设备同时预览struct LandmarkList_Previews: PreviewProvider &#123; static var previews: some View &#123; ForEach([&quot;iPhone 8&quot;, &quot;iPhone 12 Pro Max&quot;], id: \\.self) &#123; deviceName in LandmarkList() .previewDevice(PreviewDevice(rawValue: deviceName)) .previewDisplayName(deviceName) &#125; &#125;&#125; 组合静态的View和动态的view到List里，可使用List + ForEach： 123456789101112131415161718List(filteredLandmarks) &#123; landmark in NavigationLink(destination: LandmarkDetail(landmark: landmark)) &#123; LandmarkRow(landmark: landmark) &#125;&#125;替换为List &#123; Toggle(isOn: $showFavoriteOnly) &#123; Text(&quot;Favorites only&quot;) &#125; ForEach(filteredLandmarks) &#123; landmark in NavigationLink(destination: LandmarkDetail(landmark: landmark)) &#123; LandmarkRow(landmark: landmark) &#125; &#125;&#125; 如果遍历的对象没有实现Identifiable协议，则需要传id 12345List &#123; ForEach(modelData.categories.keys.sorted(), id: \\.self) &#123; key in Text(key) &#125;&#125; ObservableObject协议当遵守ObservableObject协议的数据更新时，绑定数据的view会自动更新 123final class ModelData: ObservableObject &#123; @Published var landmarks: [Landmark] &#x3D; load(&quot;landmarkData.json&quot;)&#125; @Published使用@Published修饰监听对象的属性，表示该对象的属性需要把属性值的改变更新进去 123final class ModelData: ObservableObject &#123; @Published var landmarks: [Landmark] &#x3D; load(&quot;landmarkData.json&quot;)&#125; @StateObject使用@StateObject初始化一个监听对象的数据，使用.environmentObject把数据设置到环境对象里，在需要的地方去取环境对象@EnvironmentObject var modelData: ModelData进行使用 12345678910111213141516171819@mainstruct MySwiftUIApp: App &#123; &#x2F;&#x2F; 定义 @StateObject private var modelData &#x3D; ModelData() var body: some Scene &#123; WindowGroup &#123; ContentView() &#x2F;&#x2F; 设置 .environmentObject(modelData) &#125; &#125;&#125;&#x2F;&#x2F; 取@EnvironmentObject var modelData: ModelData&#x2F;&#x2F; 使用modelData.landmarks Bool的toggle()方法：在true和false之前切换 @EnvironmentObject属性用于在下级view中接收传递过来的参数 environmentObject(_:) 方法用于向下级传递参数 @Binding：绑定修饰符用于修饰一个值，这个值用来改变另外一个值12345绑定：@Binding var isSet: Bool修改：FavoriteButton(isSet: $modelData.landmarks[landmarkIndex].isFavorite) 定义有状态的字段，使用@State修饰，定义为private，并且赋初始值@State private var showFavoritesOnly = false @State：使用@State属性为应用程序中的数据建立一个真实来源，您可以从多个视图中修改这些数据。SwiftUI管理底层存储并根据值自动更新视图。 使用Path直接绘制，可以当做View来使用 View动画，包括颜色、透明度、旋转、大小和其他属性等，可以使用withAnimation来包裹状态State实现动画1234567withAnimation &#123; self.showDetail.toggle()&#125;withAnimation(.easeInOut(duration: 4)) &#123; self.showDetail.toggle()&#125; 调用View的transition可以为View添加动画HikeDetail(hike: hike).transition(.slide)自定义transition可自定义动画12345678910111213141516171819extension AnyTransition &#123; static var moveAndFade: AnyTransition &#123; AnyTransition.slide &#125;&#125;extension AnyTransition &#123; static var moveAndFade: AnyTransition &#123; AnyTransition.move(edge: .trailing) &#125;&#125;extension AnyTransition &#123; static var moveAndFade: AnyTransition &#123; let insertion &#x3D; AnyTransition.move(edge: .trailing).combined(with: .opacity) let removal &#x3D; AnyTransition.scale.combined(with: .opacity) return .asymmetric(insertion: insertion, removal: removal) &#125;&#125; ListRowInsets用来调整一个view在lsit中的上下左右间距 CaseIterable，用在enum中用来获取allCases方法","categories":[{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/tags/Swift/"},{"name":"SwiftUI","slug":"SwiftUI","permalink":"http://yuanzhiying.github.io/tags/SwiftUI/"}]},{"title":"SwiftUI 中的some关键字","slug":"SwiftUI-中的some关键字","date":"2021-01-13T10:03:43.000Z","updated":"2021-01-14T10:01:02.526Z","comments":true,"path":"2021/01/13/SwiftUI-中的some关键字/","link":"","permalink":"http://yuanzhiying.github.io/2021/01/13/SwiftUI-%E4%B8%AD%E7%9A%84some%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"SwiftUI 中的some关键字","categories":[{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/categories/Swift/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://yuanzhiying.github.io/tags/iOS/"},{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/tags/Swift/"},{"name":"SwiftUI","slug":"SwiftUI","permalink":"http://yuanzhiying.github.io/tags/SwiftUI/"}]},{"title":"Xcode清除缓存相关文件","slug":"Xcode清除缓存相关文件","date":"2020-12-24T08:34:00.000Z","updated":"2021-01-14T10:03:37.636Z","comments":true,"path":"2020/12/24/Xcode清除缓存相关文件/","link":"","permalink":"http://yuanzhiying.github.io/2020/12/24/Xcode%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6/","excerpt":"","text":"参考文章：Xcode清除缓存相关文件 可删1. 模拟器运行程序产生的数据(DerivedData)（可删）~/Library/Developer/Xcode/DerivedData 2. Xcode打包产生的app icon历史版本(Products)（可删）~/Library/Developer/Xcode/Products/ 3. XCPGDevices(playground 项目缓存)（可删）~/Library/Developer/XCPGDevices/ 选删1. Xcode打ipa包的历史记录xcarchive文件（选删）~/Library/Developer/Xcode/Archives 2. 设备支持文件(DeviceSupport)（选删）~/Library/Developer/Xcode/iOS DeviceSupport 3. 证书描述文件（选删）~/Library/MobileDevice/Provisioning Profiles 4. 模拟器文件（选删）~/Library/Developer/CoreSimulator/Profiles/Devices/","categories":[{"name":"Mac","slug":"Mac","permalink":"http://yuanzhiying.github.io/categories/Mac/"}],"tags":[]},{"title":"iMac合并融合硬盘","slug":"iMac合并融合硬盘","date":"2020-12-21T15:46:55.000Z","updated":"2020-12-22T01:40:32.237Z","comments":true,"path":"2020/12/21/iMac合并融合硬盘/","link":"","permalink":"http://yuanzhiying.github.io/2020/12/21/iMac%E5%90%88%E5%B9%B6%E8%9E%8D%E5%90%88%E7%A1%AC%E7%9B%98/","excerpt":"","text":"官方文档：https://support.apple.com/zh-cn/HT207584 使用“终端”重新创建融合硬盘 以下步骤将永久删除融合硬盘所含驱动器上储存的所有数据。在继续之前，请确保您进行了备份。 如果您使用的是 macOS Mojave 或更高版本 将 Mac 开机，然后立即按住 Command-R 以通过 macOS 恢复功能启动。在看到 Apple 标志或旋转的地球时松开这些键。 当您看到“macOS 实用工具”窗口时，请从菜单栏中选取“实用工具”&gt;“终端”。 在“终端”窗口中键入 diskutil resetFusion，然后按 Return 键。 在出现提示时键入 Yes（Y 需要大写），然后按 Return 键。 当“终端”指示操作成功时，退出“终端”以返回“macOS 实用工具”窗口。 选取“重新安装 macOS”，然后按照屏幕上的说明操作，以重新安装 Mac 操作系统。完成后，Mac 将从您的融合硬盘重新启动。","categories":[{"name":"Mac","slug":"Mac","permalink":"http://yuanzhiying.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yuanzhiying.github.io/tags/Mac/"}]},{"title":"hexo常用命令","slug":"hexo常用命令","date":"2020-12-16T08:12:17.000Z","updated":"2020-12-16T09:12:05.044Z","comments":true,"path":"2020/12/16/hexo常用命令/","link":"","permalink":"http://yuanzhiying.github.io/2020/12/16/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"npm install --save hexo-deployer-git如果出现ERROR Deployer not found: git报错，可以使用npm install --save hexo-deployer-git命令解决。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/tags/hexo/"}]},{"title":"npm、nvm使用国内淘宝源","slug":"npm、nvm使用国内淘宝源","date":"2020-12-09T02:21:45.000Z","updated":"2020-12-09T02:23:06.379Z","comments":true,"path":"2020/12/09/npm、nvm使用国内淘宝源/","link":"","permalink":"http://yuanzhiying.github.io/2020/12/09/npm%E3%80%81nvm%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E6%B7%98%E5%AE%9D%E6%BA%90/","excerpt":"","text":"npm： 显示当前的镜像地址：npm get registry 更换为淘宝的镜像地址：npm config set registry http://registry.npm.taobao.org 再次查看当前的镜像地址：npm get registry nvm： .bash_profile文件中添加：12export NVM_NODEJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;nodeexport NVM_IOJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;iojs 执行source ~/.bash_profile起效","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/tags/hexo/"}]},{"title":"Flutter、Dart学习总结","slug":"Flutter、Dart学习总结","date":"2020-12-08T07:37:16.000Z","updated":"2020-12-08T08:13:31.032Z","comments":true,"path":"2020/12/08/Flutter、Dart学习总结/","link":"","permalink":"http://yuanzhiying.github.io/2020/12/08/Flutter%E3%80%81Dart%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"","text":"Container添加 padding, margins, borders, background color, 或将其他装饰添加到widget Scaffold使用Scaffold是最容易的，它是 Material Components库中的一个widget，它提供了一个默认banner，背景颜色，并且具有添加drawer，snack bar和底部sheet的API DefaultTextStyleDefaultTextStyle.merge可以允许您创建一个默认的文本样式，该样式会被其所有的子节点继承 maxCrossAxisExtentGridView.extent中maxCrossAxisExtent的作用 SizedBox能强制子控件具有特定宽度、高度或两者都有,使子控件设置的宽高失效123456789new SizedBox( width: 100.0, height: 100.0, child: Container( width: 200.0, height: 200.0, color: Color(0xffff0000), ),) State状态管理 如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父widget管理 如果所讨论的状态是有关界面外观效果的，例如动画，那么状态最好由widget本身来管理 如果有疑问，首选是在父widget中管理状态 flutter的KeyFlutter–&gt;何时需要使用到key？flutter 中的 key flutter的json转为实体类插件（Android Studio插件）AS中搜索插件FlutterJsonBeanFactory ，安装，重启AS。在指定目录下，右键，new - dart bean class File From JSON，粘贴进json，格式化，生成即可。 dart中export使用在A库中使用export关键字引入B库，当我们使用A库的时候，会自动引入B库，也就是说我们导入了A库，就可以使用B库了。 cupertino下push的同时，隐藏tabbar1234Navigator.of(context, rootNavigator: true) .push(CupertinoPageRoute(builder: (BuildContext context) &#123; return new MsgCenterPage(); &#125;)); flutter使用16进制色值Color(0xFFFF8A65)其中0x后面的两位FF表示透明度16进制，FF后面为色值 flutter获取屏幕宽高和状态栏高度1234567891011121314&#x2F;** 获取屏幕宽度 *&#x2F; static double getScreenWidth(BuildContext context) &#123; return MediaQuery.of(context).size.width; &#125; &#x2F;** 获取屏幕高度 *&#x2F; static double getScreenHeight(BuildContext context) &#123; return MediaQuery.of(context).size.height; &#125; &#x2F;** 获取系统状态栏高度 *&#x2F; static double getSysStatsHeight(BuildContext context) &#123; return MediaQuery.of(context).padding.top; &#125; GestureDetector为布局添加手势，child和空白区域全部可点击GestureDetector的child添加为Container，同时Container要设置color，整体Container的child和空白区域才全部可点击，否则则是Container的child可点而空白不可点击。 隐藏键盘1FocusScope.of(context).requestFocus(FocusNode()); dynamic的使用在数据解析过程中，如果不确定当前类型的话，可以使用dynamic来代替，具体是某个类型的话，再转为某个类型。1234567891011121314151617181920212223@JsonSerializable()class ResultData extends Object &#123; @JsonKey(name: &#39;code&#39;) String code; @JsonKey(name: &#39;data&#39;) dynamic data; @JsonKey(name: &#39;url&#39;) String url; @JsonKey(name: &#39;message&#39;) String message; ResultData(this.code,this.data,this.url,this.message,); factory ResultData.fromJson(Map&lt;String, dynamic&gt; srcJson) &#x3D;&gt; _$ResultDataFromJson(srcJson); Map&lt;String, dynamic&gt; toJson() &#x3D;&gt; _$ResultDataToJson(this);&#125; flutter延迟执行123new Future.delayed(Duration(seconds: 2), () &#123; Navigator.of(context).pop(); &#125;); flutter中url中编码解码例如：需要将js://iOSAction?%7B%22method%22:%22toLogin%22%7D转为js://iOSAction?&#123;&quot;method&quot;:&quot;toLogin&quot;&#125;使用Uri的decode方法：String url = Uri.decodeFull(navigation.url);相反，编码的话，使用Uri的encode方法。 flutter的图片布局填充满父布局1234567891011121314151617方法一：new ConstrainedBox( constraints: new BoxConstraints.expand(), child: new FadeInImage.assetNetwork( placeholder: &quot;assets&#x2F;home&#x2F;placeholder_default.png&quot;, image: model !&#x3D; null ? &quot;$&#123;APIConfig.pictureURL&#125;&quot; &quot;$&#123;model.pictureUrl&#125;&quot; : null, fit: BoxFit.fill, ), ),方法二：如果已知宽高，Image里直接定义指定的宽和高MediaQuery.of(context).size.widthMediaQuery.of(context).size.height Text超出省略号截断TextOverflow.ellipsis1234new Text( &#39;我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门&#39;, overflow: TextOverflow.ellipsis, ), list通过map转化的时候获取indexlist通过asMap转为Map，然后使用Map.map获取index。1234567891011121314151617181920212223homeNoticeList .asMap() .map((index, model) &#x3D;&gt; MapEntry( index, new GestureDetector( onTap: () &#123; logPrint(index, message: &quot;我点击了滚动的广告&quot;); &#125;, child: new Container( color: ColorConfig.white, child: new Align( alignment: Alignment.centerLeft, child: new Text( model.title, style: new TextStyle(fontSize: 14.0), overflow: TextOverflow.ellipsis, ), ), ), ), )) .values .toList(); Cookie管理网络请求使用dio进行网络请求，可以添加cookiemanager拦截器，来对cookie进行自动管理，也可手动删除cookie。Flutter中添加依赖12dio: ^2.1.7 # 网络请求cookie_jar: ^1.0.0 # cookie管理 dio请求封装中，添加拦截器：12&#x2F;&#x2F; 添加&#96;Cookie&#96;管理 dio.interceptors.add(CookieManager(CookieJar())); 然后在request的headers中会自动增加1cookie: SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed 与iOS的moya cookie不一样，一个是cookie，一个是&quot;Set-Cookie&quot;（header中拼入）：1[&quot;Set-Cookie&quot;:SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed] Appbar中使用自定义的返回按钮先设置automaticallyImplyLeading为false，然后在leading中设置返回按钮。1234567automaticallyImplyLeading: false, leading: new GestureDetector( onTap: () &#123; Navigator.of(context).pop(); &#125;, child: new Image.asset(&#39;assets&#x2F;common&#x2F;nav_back_arrow.png&#39;), ), 设置appbar高度1234appBar: new PreferredSize( child: appBar, preferredSize: Size.fromHeight(44), ), 使用webview_flutter时执行调用js的方法：推荐在onPageFinished里调用。例如：123456789101112131415onPageFinished: (String url) &#123; print(&quot;page finished loading: $url&quot;); setState(() &#123; isLoading &#x3D; false; &#125;); &#x2F;&#x2F; 如果为项目风险等级的url，则执行隐藏header的js。 if (widget.url &#x3D;&#x3D; ContentConfig.projectRiskLevel) &#123; _controller.future.then((controller) &#123; controller .evaluateJavascript(&#39;hideHeader();&#39;) .then((result) &#123;&#125;); &#125;); &#125; &#125; android studio中使用print打印，只能打印出一部分的解决办法：导入foundation库：import &#39;package:flutter/foundation.dart&#39;;使用flutter里foundation中的debugPrint打印即可打印全部。 TabBar对应的TabController使用代码切换tabBar (index从0开始)：1controller.animateTo(index); flutter富文本RichText使用RichText在段落中显示不同样式 复制到粘贴板123456import &#39;package:flutter&#x2F;services.dart&#39;; static copyToClipboard(final String text) &#123; if (text &#x3D;&#x3D; null) return; Clipboard.setData(new ClipboardData(text: text)); &#125; 返回当前的时间戳123static int currentTimeMillis() &#123; return new DateTime.now().millisecondsSinceEpoch; &#125; 返回文件大小字符串12345678910111213141516171819202122232425static const RollupSize_Units &#x3D; [&quot;GB&quot;, &quot;MB&quot;, &quot;KB&quot;, &quot;B&quot;]; &#x2F;** 返回文件大小字符串 *&#x2F; static String getRollupSize(int size) &#123; int idx &#x3D; 3; int r1 &#x3D; 0; String result &#x3D; &quot;&quot;; while (idx &gt;&#x3D; 0) &#123; int s1 &#x3D; size % 1024; size &#x3D; size &gt;&gt; 10; if (size &#x3D;&#x3D; 0 || idx &#x3D;&#x3D; 0) &#123; r1 &#x3D; (r1 * 100) ~&#x2F; 1024; if (r1 &gt; 0) &#123; if (r1 &gt;&#x3D; 10) result &#x3D; &quot;$s1.$r1$&#123;RollupSize_Units[idx]&#125;&quot;; else result &#x3D; &quot;$s1.0$r1$&#123;RollupSize_Units[idx]&#125;&quot;; &#125; else result &#x3D; s1.toString() + RollupSize_Units[idx]; break; &#125; r1 &#x3D; s1; idx--; &#125; return result; &#125; flutter调起拨打电话12345678910111213141516import &#39;package:url_launcher&#x2F;url_launcher.dart&#39;;Future&lt;void&gt; _launched;Future&lt;void&gt; _makePhoneCall(String url) async &#123; if (await canLaunch(url)) &#123; await launch(url); &#125; else &#123; throw &#39;Could not launch $url&#39;; &#125; &#125;&#x2F;&#x2F; 调起拨打电话 setState(() &#123; _launched &#x3D; _makePhoneCall(&#39;tel:18612345678&#39;); &#125;); 垂直分割线1234Container( height: 40, child: VerticalDivider(color: Colors.red), ), 可取消的定时任务Timer代替Future.","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://yuanzhiying.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://yuanzhiying.github.io/tags/Flutter/"},{"name":"Dart","slug":"Dart","permalink":"http://yuanzhiying.github.io/tags/Dart/"}]}],"categories":[{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/categories/Swift/"},{"name":"Mac","slug":"Mac","permalink":"http://yuanzhiying.github.io/categories/Mac/"},{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/categories/hexo/"},{"name":"Flutter","slug":"Flutter","permalink":"http://yuanzhiying.github.io/categories/Flutter/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://yuanzhiying.github.io/tags/Swift/"},{"name":"SwiftUI","slug":"SwiftUI","permalink":"http://yuanzhiying.github.io/tags/SwiftUI/"},{"name":"iOS","slug":"iOS","permalink":"http://yuanzhiying.github.io/tags/iOS/"},{"name":"Mac","slug":"Mac","permalink":"http://yuanzhiying.github.io/tags/Mac/"},{"name":"hexo","slug":"hexo","permalink":"http://yuanzhiying.github.io/tags/hexo/"},{"name":"Flutter","slug":"Flutter","permalink":"http://yuanzhiying.github.io/tags/Flutter/"},{"name":"Dart","slug":"Dart","permalink":"http://yuanzhiying.github.io/tags/Dart/"}]}