<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flutter、Dart学习总结</title>
    <url>/2020/12/08/Flutter%E3%80%81Dart%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4>添加 padding, margins, borders, background color, 或将其他装饰添加到widget</li>
<li><h4 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h4>使用Scaffold是最容易的，它是 Material Components库中的一个widget，它提供了一个默认banner，背景颜色，并且具有添加drawer，snack bar和底部sheet的API</li>
<li><h4 id="DefaultTextStyle"><a href="#DefaultTextStyle" class="headerlink" title="DefaultTextStyle"></a>DefaultTextStyle</h4>DefaultTextStyle.merge可以允许您创建一个默认的文本样式，该样式会被其所有的子节点继承</li>
<li><h4 id="maxCrossAxisExtent"><a href="#maxCrossAxisExtent" class="headerlink" title="maxCrossAxisExtent"></a>maxCrossAxisExtent</h4><a href="https://www.jianshu.com/p/8a142e06c48e">GridView.extent中maxCrossAxisExtent的作用</a></li>
<li><h4 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h4>能强制子控件具有特定宽度、高度或两者都有,使子控件设置的宽高失效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new SizedBox(</span><br><span class="line">  width: 100.0,</span><br><span class="line">  height: 100.0,</span><br><span class="line">  child: Container(</span><br><span class="line">    width: 200.0,</span><br><span class="line">    height: 200.0,</span><br><span class="line">    color: Color(0xffff0000),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><h4 id="State状态管理"><a href="#State状态管理" class="headerlink" title="State状态管理"></a>State状态管理</h4></li>
</ul>
<ol>
<li>如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父widget管理</li>
<li>如果所讨论的状态是有关界面外观效果的，例如动画，那么状态最好由widget本身来管理</li>
<li>如果有疑问，首选是在父widget中管理状态</li>
</ol>
<ul>
<li><h4 id="flutter的Key"><a href="#flutter的Key" class="headerlink" title="flutter的Key"></a>flutter的Key</h4><a href="https://www.jianshu.com/p/fc88c0774078">Flutter–&gt;何时需要使用到key？</a><br><a href="https://www.jianshu.com/p/3b2bc9f0ddd6">flutter 中的 key</a></li>
<li><h4 id="flutter的json转为实体类插件（Android-Studio插件）"><a href="#flutter的json转为实体类插件（Android-Studio插件）" class="headerlink" title="flutter的json转为实体类插件（Android Studio插件）"></a>flutter的json转为实体类插件（Android Studio插件）</h4>AS中搜索插件<code>FlutterJsonBeanFactory </code>，安装，重启AS。<br>在指定目录下，右键，new - dart bean class File From JSON，粘贴进json，格式化，生成即可。<br><img src="2988687-b38ed2f78df0bcec.png" alt="2988687-b38ed2f78df0bcec.png"></li>
<li><h4 id="dart中export使用"><a href="#dart中export使用" class="headerlink" title="dart中export使用"></a>dart中export使用</h4>在A库中使用export关键字引入B库，当我们使用A库的时候，会自动引入B库，也就是说我们导入了A库，就可以使用B库了。</li>
<li><h4 id="cupertino下push的同时，隐藏tabbar"><a href="#cupertino下push的同时，隐藏tabbar" class="headerlink" title="cupertino下push的同时，隐藏tabbar"></a>cupertino下push的同时，隐藏tabbar</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Navigator.of(context, rootNavigator: true)</span><br><span class="line">          .push(CupertinoPageRoute(builder: (BuildContext context) &#123;</span><br><span class="line">        return new MsgCenterPage();</span><br><span class="line">      &#125;));</span><br></pre></td></tr></table></figure></li>
<li><h4 id="flutter使用16进制色值"><a href="#flutter使用16进制色值" class="headerlink" title="flutter使用16进制色值"></a>flutter使用16进制色值</h4>Color(0xFFFF8A65)其中0x后面的两位FF表示透明度16进制，FF后面为色值</li>
<li><h4 id="flutter获取屏幕宽高和状态栏高度"><a href="#flutter获取屏幕宽高和状态栏高度" class="headerlink" title="flutter获取屏幕宽高和状态栏高度"></a>flutter获取屏幕宽高和状态栏高度</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 获取屏幕宽度 *&#x2F;</span><br><span class="line">  static double getScreenWidth(BuildContext context) &#123;</span><br><span class="line">    return MediaQuery.of(context).size.width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;** 获取屏幕高度 *&#x2F;</span><br><span class="line">  static double getScreenHeight(BuildContext context) &#123;</span><br><span class="line">    return MediaQuery.of(context).size.height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;** 获取系统状态栏高度 *&#x2F;</span><br><span class="line">  static double getSysStatsHeight(BuildContext context) &#123;</span><br><span class="line">    return MediaQuery.of(context).padding.top;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="GestureDetector为布局添加手势，child和空白区域全部可点击"><a href="#GestureDetector为布局添加手势，child和空白区域全部可点击" class="headerlink" title="GestureDetector为布局添加手势，child和空白区域全部可点击"></a>GestureDetector为布局添加手势，child和空白区域全部可点击</h4>GestureDetector的child添加为Container，同时Container要设置color，整体Container的child和空白区域才全部可点击，否则则是Container的child可点而空白不可点击。</li>
<li><h4 id="隐藏键盘"><a href="#隐藏键盘" class="headerlink" title="隐藏键盘"></a>隐藏键盘</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FocusScope.of(context).requestFocus(FocusNode());</span><br></pre></td></tr></table></figure></li>
<li><h4 id="dynamic的使用"><a href="#dynamic的使用" class="headerlink" title="dynamic的使用"></a>dynamic的使用</h4>在数据解析过程中，如果不确定当前类型的话，可以使用dynamic来代替，具体是某个类型的话，再转为某个类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@JsonSerializable()</span><br><span class="line">class ResultData extends Object &#123;</span><br><span class="line"></span><br><span class="line">  @JsonKey(name: &#39;code&#39;)</span><br><span class="line">  String code;</span><br><span class="line"></span><br><span class="line">  @JsonKey(name: &#39;data&#39;)</span><br><span class="line">  dynamic data;</span><br><span class="line"></span><br><span class="line">  @JsonKey(name: &#39;url&#39;)</span><br><span class="line">  String url;</span><br><span class="line"></span><br><span class="line">  @JsonKey(name: &#39;message&#39;)</span><br><span class="line">  String message;</span><br><span class="line"></span><br><span class="line">  ResultData(this.code,this.data,this.url,this.message,);</span><br><span class="line"></span><br><span class="line">  factory ResultData.fromJson(Map&lt;String, dynamic&gt; srcJson) &#x3D;&gt; _$ResultDataFromJson(srcJson);</span><br><span class="line"></span><br><span class="line">  Map&lt;String, dynamic&gt; toJson() &#x3D;&gt; _$ResultDataToJson(this);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="flutter延迟执行"><a href="#flutter延迟执行" class="headerlink" title="flutter延迟执行"></a>flutter延迟执行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Future.delayed(Duration(seconds: 2), () &#123;</span><br><span class="line">        Navigator.of(context).pop();</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="flutter中url中编码解码"><a href="#flutter中url中编码解码" class="headerlink" title="flutter中url中编码解码"></a>flutter中url中编码解码</h4>例如：需要将<br><code>js://iOSAction?%7B%22method%22:%22toLogin%22%7D</code><br>转为<br><code>js://iOSAction?&#123;&quot;method&quot;:&quot;toLogin&quot;&#125;</code><br>使用Uri的decode方法：<br><code>String url = Uri.decodeFull(navigation.url);</code><br>相反，编码的话，使用Uri的encode方法。</li>
<li><h4 id="flutter的图片布局填充满父布局"><a href="#flutter的图片布局填充满父布局" class="headerlink" title="flutter的图片布局填充满父布局"></a>flutter的图片布局填充满父布局</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">new ConstrainedBox(</span><br><span class="line">                  constraints: new BoxConstraints.expand(),</span><br><span class="line">                  child: new FadeInImage.assetNetwork(</span><br><span class="line">                    placeholder: &quot;assets&#x2F;home&#x2F;placeholder_default.png&quot;,</span><br><span class="line">                    image: model !&#x3D; null</span><br><span class="line">                        ? &quot;$&#123;APIConfig.pictureURL&#125;&quot;</span><br><span class="line">                        &quot;$&#123;model.pictureUrl&#125;&quot;</span><br><span class="line">                        : null,</span><br><span class="line">                    fit: BoxFit.fill,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">如果已知宽高，Image里直接定义指定的宽和高</span><br><span class="line">MediaQuery.of(context).size.width</span><br><span class="line">MediaQuery.of(context).size.height</span><br></pre></td></tr></table></figure></li>
<li><h4 id="Text超出省略号截断"><a href="#Text超出省略号截断" class="headerlink" title="Text超出省略号截断"></a>Text超出省略号截断</h4><code>TextOverflow.ellipsis</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Text(</span><br><span class="line">                  &#39;我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门，我爱北京天安门&#39;,</span><br><span class="line">                  overflow: TextOverflow.ellipsis,</span><br><span class="line">                ),</span><br></pre></td></tr></table></figure></li>
<li><h4 id="list通过map转化的时候获取index"><a href="#list通过map转化的时候获取index" class="headerlink" title="list通过map转化的时候获取index"></a><code>list</code>通过<code>map</code>转化的时候获取<code>index</code></h4><code>list</code>通过<code>asMap</code>转为<code>Map</code>，然后使用<code>Map.map</code>获取<code>index</code>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">homeNoticeList</span><br><span class="line">    .asMap()</span><br><span class="line">    .map((index, model) &#x3D;&gt; MapEntry(</span><br><span class="line">          index,</span><br><span class="line">          new GestureDetector(</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              logPrint(index, message: &quot;我点击了滚动的广告&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: new Container(</span><br><span class="line">              color: ColorConfig.white,</span><br><span class="line">              child: new Align(</span><br><span class="line">                alignment: Alignment.centerLeft,</span><br><span class="line">                child: new Text(</span><br><span class="line">                  model.title,</span><br><span class="line">                  style: new TextStyle(fontSize: 14.0),</span><br><span class="line">                  overflow: TextOverflow.ellipsis,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ))</span><br><span class="line">    .values</span><br><span class="line">    .toList();</span><br></pre></td></tr></table></figure></li>
<li><h4 id="Cookie管理"><a href="#Cookie管理" class="headerlink" title="Cookie管理"></a><code>Cookie</code>管理</h4>网络请求使用dio进行网络请求，可以添加cookiemanager拦截器，来对cookie进行自动管理，也可手动删除cookie。<br>Flutter中添加依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dio: ^2.1.7 # 网络请求</span><br><span class="line">cookie_jar: ^1.0.0 # cookie管理</span><br></pre></td></tr></table></figure>
dio请求封装中，添加拦截器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加&#96;Cookie&#96;管理</span><br><span class="line">    dio.interceptors.add(CookieManager(CookieJar()));</span><br></pre></td></tr></table></figure>
然后在<code>request</code>的<code>headers</code>中会自动增加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie: SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed</span><br></pre></td></tr></table></figure>
与<code>iOS</code>的<code>moya</code> <code>cookie</code>不一样，一个是<code>cookie</code>，一个是<code>&quot;Set-Cookie&quot;</code>（header中拼入）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;Set-Cookie&quot;:SESSION&#x3D;9d41c3e9-5619-492f-aa92-d85add6b04ed]</span><br></pre></td></tr></table></figure></li>
<li><h4 id="Appbar中使用自定义的返回按钮"><a href="#Appbar中使用自定义的返回按钮" class="headerlink" title="Appbar中使用自定义的返回按钮"></a><code>Appbar</code>中使用自定义的返回按钮</h4>先设置<code>automaticallyImplyLeading</code>为<code>false</code>，然后在<code>leading</code>中设置返回按钮。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">automaticallyImplyLeading: false,</span><br><span class="line">        leading: new GestureDetector(</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            Navigator.of(context).pop();</span><br><span class="line">          &#125;,</span><br><span class="line">          child: new Image.asset(&#39;assets&#x2F;common&#x2F;nav_back_arrow.png&#39;),</span><br><span class="line">        ),</span><br></pre></td></tr></table></figure></li>
<li><h4 id="设置appbar高度"><a href="#设置appbar高度" class="headerlink" title="设置appbar高度"></a>设置appbar高度</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appBar: new PreferredSize(</span><br><span class="line">        child: appBar,</span><br><span class="line">        preferredSize: Size.fromHeight(44),</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure></li>
<li><h4 id="使用webview-flutter时执行调用js的方法："><a href="#使用webview-flutter时执行调用js的方法：" class="headerlink" title="使用webview_flutter时执行调用js的方法："></a>使用<code>webview_flutter</code>时执行调用<code>js</code>的方法：</h4>推荐在<code>onPageFinished</code>里调用。<br>例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onPageFinished: (String url) &#123;</span><br><span class="line">                      print(&quot;page finished loading: $url&quot;);</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        isLoading &#x3D; false;</span><br><span class="line">                      &#125;);</span><br><span class="line"></span><br><span class="line">                      &#x2F;&#x2F; 如果为项目风险等级的url，则执行隐藏header的js。</span><br><span class="line">                      if (widget.url &#x3D;&#x3D; ContentConfig.projectRiskLevel) &#123;</span><br><span class="line">                        _controller.future.then((controller) &#123;</span><br><span class="line">                          controller</span><br><span class="line">                              .evaluateJavascript(&#39;hideHeader();&#39;)</span><br><span class="line">                              .then((result) &#123;&#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="android-studio中使用print打印，只能打印出一部分的解决办法："><a href="#android-studio中使用print打印，只能打印出一部分的解决办法：" class="headerlink" title="android studio中使用print打印，只能打印出一部分的解决办法："></a><code>android studio</code>中使用<code>print</code>打印，只能打印出一部分的解决办法：</h4>导入<code>foundation</code>库：<br><code>import &#39;package:flutter/foundation.dart&#39;;</code><br>使用<code>flutter</code>里<code>foundation</code>中的<code>debugPrint</code>打印即可打印全部。</li>
<li><h4 id="TabBar对应的TabController使用代码切换tabBar-index从0开始-："><a href="#TabBar对应的TabController使用代码切换tabBar-index从0开始-：" class="headerlink" title="TabBar对应的TabController使用代码切换tabBar (index从0开始)："></a>TabBar对应的TabController使用代码切换tabBar (index从0开始)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">controller.animateTo(index);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="flutter富文本RichText使用"><a href="#flutter富文本RichText使用" class="headerlink" title="flutter富文本RichText使用"></a>flutter富文本RichText使用</h4><a href="https://www.jianshu.com/p/c4ee2a7a97d2">RichText在段落中显示不同样式</a></li>
<li><h4 id="复制到粘贴板"><a href="#复制到粘贴板" class="headerlink" title="复制到粘贴板"></a>复制到粘贴板</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;services.dart&#39;;</span><br><span class="line"></span><br><span class="line">  static copyToClipboard(final String text) &#123;</span><br><span class="line">    if (text &#x3D;&#x3D; null) return;</span><br><span class="line">    Clipboard.setData(new ClipboardData(text: text));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="返回当前的时间戳"><a href="#返回当前的时间戳" class="headerlink" title="返回当前的时间戳"></a>返回当前的时间戳</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int currentTimeMillis() &#123;</span><br><span class="line">    return new DateTime.now().millisecondsSinceEpoch;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="返回文件大小字符串"><a href="#返回文件大小字符串" class="headerlink" title="返回文件大小字符串"></a>返回文件大小字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static const RollupSize_Units &#x3D; [&quot;GB&quot;, &quot;MB&quot;, &quot;KB&quot;, &quot;B&quot;];</span><br><span class="line">  &#x2F;** 返回文件大小字符串 *&#x2F;</span><br><span class="line">  static String getRollupSize(int size) &#123;</span><br><span class="line">    int idx &#x3D; 3;</span><br><span class="line">    int r1 &#x3D; 0;</span><br><span class="line">    String result &#x3D; &quot;&quot;;</span><br><span class="line">    while (idx &gt;&#x3D; 0) &#123;</span><br><span class="line">      int s1 &#x3D; size % 1024;</span><br><span class="line">      size &#x3D; size &gt;&gt; 10;</span><br><span class="line">      if (size &#x3D;&#x3D; 0 || idx &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        r1 &#x3D; (r1 * 100) ~&#x2F; 1024;</span><br><span class="line">        if (r1 &gt; 0) &#123;</span><br><span class="line">          if (r1 &gt;&#x3D; 10)</span><br><span class="line">            result &#x3D; &quot;$s1.$r1$&#123;RollupSize_Units[idx]&#125;&quot;;</span><br><span class="line">          else</span><br><span class="line">            result &#x3D; &quot;$s1.0$r1$&#123;RollupSize_Units[idx]&#125;&quot;;</span><br><span class="line">        &#125; else</span><br><span class="line">          result &#x3D; s1.toString() + RollupSize_Units[idx];</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">      r1 &#x3D; s1;</span><br><span class="line">      idx--;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="flutter调起拨打电话"><a href="#flutter调起拨打电话" class="headerlink" title="flutter调起拨打电话"></a>flutter调起拨打电话</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:url_launcher&#x2F;url_launcher.dart&#39;;</span><br><span class="line"></span><br><span class="line">Future&lt;void&gt; _launched;</span><br><span class="line"></span><br><span class="line">Future&lt;void&gt; _makePhoneCall(String url) async &#123;</span><br><span class="line">    if (await canLaunch(url)) &#123;</span><br><span class="line">      await launch(url);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      throw &#39;Could not launch $url&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调起拨打电话</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _launched &#x3D; _makePhoneCall(&#39;tel:18612345678&#39;);</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="垂直分割线"><a href="#垂直分割线" class="headerlink" title="垂直分割线"></a>垂直分割线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">                  height: 40,</span><br><span class="line">                  child: VerticalDivider(color: Colors.red),</span><br><span class="line">                ),</span><br></pre></td></tr></table></figure></li>
<li><h4 id="可取消的定时任务"><a href="#可取消的定时任务" class="headerlink" title="可取消的定时任务"></a>可取消的定时任务</h4>Timer代替Future.</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
</search>
